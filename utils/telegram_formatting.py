"""Telegram message formatting utilities."""
from aiogram.utils.formatting import (
    Text, Bold, Italic, Underline, Code, Pre, 
    BlockQuote, Link, TextLink, HashTag, Spoiler,
    as_list, as_section, as_key_value, as_marked_section
)
from aiogram.enums import ParseMode
import re


def escape_html(text: str) -> str:
    """Escape special HTML characters."""
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace('"', "&quot;")
    )


def format_transcription_header(confidence: float) -> Text:
    """Format transcription header with confidence."""
    return Text(
        Bold("üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è"),
        "\n",
        Italic(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}"),
        "\n\n"
    )


def format_style_result(style: str, text: str) -> Text:
    """Format styled text result with proper headers."""
    style_names = {
        "proofread": "‚úçÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
        "my": "‚ö° –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å",
        "business": "üëî –î–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å",
        "brief": "üìã –ë—Ä–∏—Ñ"
    }
    
    header = style_names.get(style, "üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç")
    
    # For brief style, parse the sections and format them
    if style == "brief":
        return format_brief_sections(text)
    
    return Text(
        Bold(header),
        "\n\n",
        text
    )


def format_brief_sections(text: str) -> Text:
    """Format brief sections with proper styling."""
    sections = []
    
    # Split text into lines
    lines = text.split('\n')
    current_section = []
    
    for line in lines:
        line = line.strip()
        
        # Check if it's a header (starts with emoji or specific keywords)
        if (line.startswith('üìù') or line.startswith('–ß—Ç–æ –¥–µ–ª–∞–µ–º:') or 
            line.startswith('–ó–∞—á–µ–º:') or line.startswith('–ö–∞–∫:') or 
            line.startswith('–°—Ä–æ–∫–∏:') or line.startswith('–í–æ–ø—Ä–æ—Å—ã:')):
            
            # Save previous section if exists
            if current_section:
                sections.append('\n'.join(current_section))
                current_section = []
            
            # Add formatted header
            if line.startswith('üìù'):
                sections.append(Bold(line))
            else:
                sections.append(Bold(line))
        else:
            # Add regular line
            if line:
                current_section.append(line)
    
    # Add last section
    if current_section:
        sections.append('\n'.join(current_section))
    
    # Join all sections with double newline
    return Text(*[
        item if isinstance(item, (Bold, Italic, Text)) else Text(item)
        for item in sections
    ], sep="\n\n")


def format_error_message(error: str) -> Text:
    """Format error message."""
    return Text(
        Bold("‚ùå –û—à–∏–±–∫–∞"),
        "\n",
        Code(error)
    )


def format_processing_message() -> Text:
    """Format processing status message."""
    return Text(
        Italic("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    )